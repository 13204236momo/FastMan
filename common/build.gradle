apply plugin: 'com.android.library'

//赋值与引用
def androidId = rootProject.ext.androidId
def support = rootProject.ext.dependencies

android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion
    defaultConfig {
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //最简洁的引入方式
    support.each { k, v -> implementation v }

    implementation project(':annotation')
    // 每个功能子模块既然都要生成APT源文件，而且又是所有模块依赖的公共库
    // 那么公共基础库依赖路由arouter_api就能向每个子模块提供开放api了
    api project(':arouter_api') // 路由对外开放api模块

}

