apply plugin: 'com.android.application'
//赋值与引用
def androidId = rootProject.ext.androidId
def support = rootProject.ext.dependencies
def processor = rootProject.ext.compilers
def appId = rootProject.ext.appId

android {
    signingConfigs {
        //默认的debug签名信息，通过数据线安装就是用的这个
        debug {
            storeFile file('/Users/zhoumohan/.android/debug.keystore')
            //storeFile file('C:\\Users\\zhoumohan\\.android\\debug.keystore')
            storePassword 'android'
            keyAlias = 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            //storeFile file('D:\\androidstudio\\demo\\FastMan\\release.ketstore')
            storeFile file('/Users/zhoumohan/AndroidStudioProjects/FastMan/release.ketstore')
            storePassword 'tianshangfastman'
            keyAlias = 'tianshangfastman'
            keyPassword 'tianshangfastman'
        }

    }


    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion
    defaultConfig {
        applicationId appId.app
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName

        //开启分包
        multiDexEnabled true
        //设置分包配置
        //multiDexKeepFile file('multidex-config.txt')
        //将svg图片生成指定维度的png图片
        //vectorDrawables.generateDensities('xhdpi','xxhdpi')
        //使用support-v7兼容（5.0版本以上）
        vectorDrawables.useSupportLibrary = true
        //只保留指定默认资源
        resConfigs('zh-rCN')
        //配置so库CPU架构
        ndk {
            abiFilters('armeabi', 'armeabi-v7a')
            //模拟器
            abiFilters('x86', 'x86_64')
        }

        //源集 - 设置源集的属性，更改源集的java目录或者自由目录
        sourceSets {
            main {
                if (!isRelease) {
                    //如果是组件化模式，需要单独运行时
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    java.srcDirs = ['src/main/java']
                    res.srcDirs = ['src/main/res']
                    resources.srcDirs = ['src/main/resources']
                    aidl.srcDirs = ['src/main/aidl']
                    assets.srcDirs = ['src/main/assets']
                } else {
                    //集成化模式，整个项目打包
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }

        //在gradle文件中配置选项参数值（用于APT传参接受）
        //必须写在defaultConfig节点下
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            buildConfigField("String", "debug", "\"${url.debug}\"")
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            buildConfigField("String", "debug", "\"${url.release}\"")
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // AdbOptions 可以对 adb 操作选项添加配置
    adbOptions {
        // 配置操作超时时间，单位毫秒
        timeOutInMs = 5 * 1000_0

        // adb install 命令的选项配置
        installOptions '-r', '-s'
    }
    // 对 dx 操作的配置，接受一个 DexOptions 类型的闭包，配置由 DexOptions 提供
    dexOptions {
        // 配置执行 dx 命令是为其分配的最大堆内存
        javaMaxHeapSize "4g"
        // 配置是否预执行 dex Libraries 工程，开启后会提高增量构建速度，不过会影响 clean 构建的速度，默认 true
        preDexLibraries = false
        // 配置是否开启 jumbo 模式，代码方法是超过 65535 需要强制开启才能构建成功
        jumboMode true
        // 配置 Gradle 运行 dx 命令时使用的线程数量
        threadCount 8
        // 配置multidex参数
        additionalParameters = [
                '--multi-dex', // 多dex分包
                '--set-max-idx-number=50000', // 每个包内方法数上限
                // '--main-dex-list=' + '/multidex-config.txt', // 打包到主classes.dex的文件列表
                '--minimal-main-dex'
        ]
    }
    // 执行 gradle lint 命令即可运行 lint 检查，默认生成的报告在 outputs/lint-results.html 中
    lintOptions {
        // 遇到 lint 检查错误会终止构建，一般设置为 false
        abortOnError false
        // 将警告当作错误来处理（老版本：warningAsErros）
        warningsAsErrors false
        // 检查新 API
        check 'NewApi'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //指定了新的apk的文件名
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def file = output.outputFile
            if (file != null && file.name.endsWith('.apk')) {
                if(variant.buildType.name == "debug"){
                    outputFileName = "fastman-v${variant.versionName}-debug.apk"
                }else if (variant.buildType.name == "release"){
                    outputFileName = "fastman-v${variant.versionName}-release.apk"
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //最简洁的引入方式
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    support.each { k, v -> implementation v }
    processor.each { k, v ->
        annotationProcessor v
    }

    api project(':common')
    implementation project(':annotation')
    //注解处理器
    annotationProcessor project(':compiler')

    if (isRelease) {
        implementation project(':order')
        implementation project(':personal')
    }
}

//aspectj 规定配置
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
